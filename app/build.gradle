plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
//    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

apply plugin: per.wsj.plugin.PublishPlugin
//apply plugin: 'com.google.devtools.ksp'

publishConfig {
    publishUrl configProperties.get("publish_url")
    ossEndpoint configProperties.get("oss_endpoint")
    ossAkId configProperties.get("oss_ak_id")
    ossAkSecret configProperties.get("oss_ak_secret")
    apkPath "${rootDir}/app/release/app-release.apk"
    versionDesc "1,解决Android 12以上开机无法桌面小部件无法启动问题.\n2,优化城市列表排序问题.\n3,规范权限申请."
}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "me.wsj.fengyun"
        minSdkVersion 27
        targetSdkVersion 30
        versionCode 25
        versionName "2.0.8"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //指定room.schemaLocation生成的文件路径
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', "arm64-v8a"
//            , 'x86'
        }
        // 过滤语言包
        resConfigs('zh-rCN', 'en')
    }

    signingConfigs {
        debug {
            if (configProperties != null && configProperties.get("filename") != null) {
                storeFile file(configProperties.get("filename"))
                storePassword configProperties.get("storePassword")
                keyAlias configProperties.get("keyAlias")
                keyPassword configProperties.get("keyPassword")
            }
        }
    }

    buildTypes {
        release {
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            manifestPlaceholders = [amap_app_key: configProperties.get("gao_de_app_key")]
            buildConfigField('String', 'HeFengKey', configProperties.get("he_feng_app_key"))
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            // todo 请在local.properties中配置天气及定位的api key
            manifestPlaceholders = [amap_app_key: configProperties.get("gao_de_app_key")]
            buildConfigField('String', 'HeFengKey', configProperties.get("he_feng_app_key"))
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /*packagingOptions {
        pickFirst('lib/armeabi-v7a/libc++_shared.so')
        pickFirst('lib/arm64-v8a/libc++_shared.so')
        pickFirst('lib/x86/libc++_shared.so')
        pickFirst('lib/x86_64/libc++_shared.so')
    }*/

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation project(path: ':lib')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation project(path: ':plugin-lib')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    implementation 'androidx.preference:preference-ktx:1.1.1'

    implementation files('libs/AMap_Location_V5.3.1_20210331.jar')
    implementation files('libs/open_sdk_3.5.11.6_r13b47b7_lite.jar')
//    implementation 'com.tencent.tauth:qqopensdk:3.52.0'

    implementation 'com.google.dagger:hilt-android:2.36'
    kapt 'com.google.dagger:hilt-compiler:2.36'

    kapt "androidx.room:room-compiler:$room_version"
//    ksp "androidx.room:room-compiler:$room_version"

//    debugImplementation 'com.github.wdsqjq:CrashCanary:1.0.7'
//
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

//    implementation "androidx.metrics:metrics-performance:1.0.0-alpha01"
}

/**
 * 修改 Android 12 因为 exported 的构建问题
 */
/*
android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        output.processResources.doFirst { pm ->
            String manifestPath = output.processResources.manifestFile
            def manifestFile = new File(manifestPath)
            def xml = new XmlParser(false, true).parse(manifestFile)
            def exportedTag = "android:exported"
            ///指定 space
            def androidSpace = new groovy.xml.Namespace('http://schemas.android.com/apk/res/android', 'android')
            def nodes = xml.application[0].'*'.findAll {
                //挑选要修改的节点，没有指定的 exported 的才需要增加
                (it.name() == 'activity' || it.name() == 'receiver' || it.name() == 'service') && it.attribute(androidSpace.exported) == null

            }
            ///添加 exported，默认 false
            nodes.each {
                def isMain = false
                it.each {
                    if(it.name() == "intent-filter") {
                        it.each {
                            if(it.name() == "action") {
                                if(it.attributes().get(androidSpace.name) == "android.intent.action.MAIN") {
                                    isMain = true
                                    println("......................MAIN FOUND......................")
                                }
                            }
                        }
                    }
                }
                it.attributes().put(exportedTag, "${isMain}")
            }

            PrintWriter pw = new PrintWriter(manifestFile)
            pw.write(groovy.xml.XmlUtil.serialize(xml))
            pw.close()
        }
    }
}
*/
